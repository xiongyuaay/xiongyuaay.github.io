<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LeetCode on yuaay</title><link>https://xiongyuaay.github.io/tags/leetcode/</link><description>Recent content in LeetCode on yuaay</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 21 Nov 2024 22:49:59 +0800</lastBuildDate><atom:link href="https://xiongyuaay.github.io/tags/leetcode/index.xml" rel="self" type="application/rss+xml"/><item><title>LeetCode--新增道路查询后的最短距离2</title><link>https://xiongyuaay.github.io/posts/leetcode/leetcode--%E6%96%B0%E5%A2%9E%E9%81%93%E8%B7%AF%E6%9F%A5%E8%AF%A2%E5%90%8E%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB2/</link><pubDate>Thu, 21 Nov 2024 22:49:59 +0800</pubDate><guid>https://xiongyuaay.github.io/posts/leetcode/leetcode--%E6%96%B0%E5%A2%9E%E9%81%93%E8%B7%AF%E6%9F%A5%E8%AF%A2%E5%90%8E%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB2/</guid><description>&lt;h1 id="问题描述">问题描述&lt;/h1>
&lt;p>给你一个整数 n 和一个二维整数数组 queries。&lt;/p>
&lt;p>有 n 个城市，编号从 0 到 n - 1。初始时，每个城市 i 都有一条单向道路通往城市 i + 1（ 0 &amp;lt;= i &amp;lt; n - 1）。&lt;/p>
&lt;p>queries[i] = [ui, vi] 表示新建一条从城市 ui 到城市 vi 的单向道路。每次查询后，你需要找到从城市 0 到城市 n - 1 的最短路径的长度。&lt;/p>
&lt;p>所有查询中不会存在两个查询都满足 queries[i][0] &amp;lt; queries[j][0] &amp;lt; queries[i][1] &amp;lt; queries[j][1]。&lt;/p>
&lt;p>返回一个数组 answer，对于范围 [0, queries.length - 1] 中的每个 i，answer[i] 是处理完前 i + 1 个查询后，从城市 0 到城市 n - 1 的最短路径的长度。&lt;/p>
&lt;p>以下为题目的一个示例：&lt;/p>
&lt;p>&lt;img src="https://xiongyuaay.github.io/images/LeetCode--%E6%96%B0%E5%A2%9E%E9%81%93%E8%B7%AF%E6%9F%A5%E8%AF%A2%E5%90%8E%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB2/image.png" alt="alt text">&lt;/p></description></item><item><title>LeetCode--新增道路查询后的最短距离1</title><link>https://xiongyuaay.github.io/posts/leetcode/leetcode--%E6%96%B0%E5%A2%9E%E9%81%93%E8%B7%AF%E6%9F%A5%E8%AF%A2%E5%90%8E%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB/</link><pubDate>Tue, 19 Nov 2024 23:54:11 +0800</pubDate><guid>https://xiongyuaay.github.io/posts/leetcode/leetcode--%E6%96%B0%E5%A2%9E%E9%81%93%E8%B7%AF%E6%9F%A5%E8%AF%A2%E5%90%8E%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB/</guid><description>&lt;h1 id="问题描述">问题描述&lt;/h1>
&lt;p>给你一个整数 n 和一个二维整数数组 queries。
有 n 个城市，编号从 0 到 n - 1。初始时，每个城市 i 都有一条单向道路通往城市 i + 1（ 0 &amp;lt;= i &amp;lt; n - 1）。
queries[i] = [ui, vi] 表示新建一条从城市 ui 到城市 vi 的单向道路。每次查询后，你需要找到从城市 0 到城市 n - 1 的最短路径的长度。
返回一个数组 answer，对于范围 [0, queries.length - 1] 中的每个 i，answer[i] 是处理完前 i + 1 个查询后，从城市 0 到城市 n - 1 的最短路径的长度。&lt;/p>
&lt;p>有如下示例：&lt;/p>
&lt;p>&lt;img src="https://xiongyuaay.github.io/images/pre/image-2.png" alt="alt text">&lt;/p>
&lt;h1 id="分析">分析&lt;/h1>
&lt;p>面对此题，第一时间考虑的是广度优先搜索，一层一层遍历每一种可能的路径，考虑到每一条路径的权重都是1，最先达到终点的即为最短路径。
此外，考虑到最终的最短路径中，考虑到达终点的前一个节点，从起点到该节点的路径也必须是最短路径，据此可递推得到最终的最短路径，且考虑到在每一次添加数组queries中的边时，只有queries[i][1]及其之后的节点可能被影响，故在每次查询时，也只需重新计算从queries[i][1]之后的节点最短路径。&lt;/p>
&lt;p>但是考虑到该题为最短路径问题，可以使用Dijkstra算法在每一次查询时计算最短路径。此解法并非最优，但这里用这种算法主要用于记录一种DIjkstra算法的C++的实现方式。&lt;/p>
&lt;h1 id="代码">代码&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;queue&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;limits&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">using&lt;/span> &lt;span style="color:#66d9ef">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Edge&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> to;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> weight;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Edge() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Edge(&lt;span style="color:#66d9ef">int&lt;/span> to, &lt;span style="color:#66d9ef">int&lt;/span> weight)&lt;span style="color:#f92672">:&lt;/span> to(to), weight(weight){}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Graph &lt;span style="color:#f92672">=&lt;/span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Edge&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> shortestDistanceAfterQueries(&lt;span style="color:#66d9ef">int&lt;/span> n, vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;amp;&lt;/span> queries) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Graph graph;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> answer;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> q_num &lt;span style="color:#f92672">=&lt;/span> queries.size();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph.resize(n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> n&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>; i&lt;span style="color:#f92672">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph[i].emplace_back(i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> q_num; i&lt;span style="color:#f92672">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph[queries[i][&lt;span style="color:#ae81ff">0&lt;/span>]].emplace_back(queries[i][&lt;span style="color:#ae81ff">1&lt;/span>], &lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> ans &lt;span style="color:#f92672">=&lt;/span> Dijkstra(graph, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> answer.emplace_back(ans);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> answer;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">Dijkstra&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> Graph&lt;span style="color:#f92672">&amp;amp;&lt;/span> graph, &lt;span style="color:#66d9ef">int&lt;/span> start)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> n &lt;span style="color:#f92672">=&lt;/span> graph.size();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> dist(n, __INT_MAX__);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dist[start] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// &amp;lt;distance, destination&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> priority_queue&lt;span style="color:#f92672">&amp;lt;&lt;/span>pair&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>, vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>pair&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>, greater&lt;span style="color:#f92672">&amp;lt;&amp;gt;&amp;gt;&lt;/span> pq;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pq.emplace(&lt;span style="color:#ae81ff">0&lt;/span>, start);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>pq.empty())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">auto&lt;/span> [curr_dist, curr_vertex] &lt;span style="color:#f92672">=&lt;/span> pq.top();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pq.pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(curr_dist &lt;span style="color:#f92672">&amp;gt;&lt;/span> dist[curr_vertex]) &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> Edge&lt;span style="color:#f92672">&amp;amp;&lt;/span> edge:graph[curr_vertex])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> new_dist &lt;span style="color:#f92672">=&lt;/span> edge.weight &lt;span style="color:#f92672">+&lt;/span> curr_dist;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(new_dist &lt;span style="color:#f92672">&amp;lt;&lt;/span> dist[edge.to])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dist[edge.to] &lt;span style="color:#f92672">=&lt;/span> new_dist;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pq.emplace(new_dist, edge.to);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> dist.back();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里记录图的结构体、选取最小距离时所用到的优先队列是之前不熟悉的用法，故记录在此。&lt;/p></description></item><item><title>LeetCode--判断矩形的两个角落是否可达</title><link>https://xiongyuaay.github.io/posts/leetcode/leetcode--%E5%88%A4%E6%96%AD%E7%9F%A9%E5%BD%A2%E7%9A%84%E4%B8%A4%E4%B8%AA%E8%A7%92%E8%90%BD%E6%98%AF%E5%90%A6%E5%8F%AF%E8%BE%BE/</link><pubDate>Tue, 12 Nov 2024 17:46:10 +0800</pubDate><guid>https://xiongyuaay.github.io/posts/leetcode/leetcode--%E5%88%A4%E6%96%AD%E7%9F%A9%E5%BD%A2%E7%9A%84%E4%B8%A4%E4%B8%AA%E8%A7%92%E8%90%BD%E6%98%AF%E5%90%A6%E5%8F%AF%E8%BE%BE/</guid><description>&lt;p>来记录一下最近写的LeetCode算法题，以免以后遗忘。“判断矩形的两个角落是否可达”是LeetCode上序号为3235的一道困难题，实现起来颇为复杂，现将整个思考解答过程记录如下：&lt;/p>
&lt;h2 id="题目">题目&lt;/h2>
&lt;p>给你两个正整数 xCorner 和 yCorner 和一个二维整数数组 circles ，其中 circles[i] = [xi, yi, ri] 表示一个圆心在 (xi, yi) 半径为 ri 的圆。&lt;/p>
&lt;p>坐标平面内有一个左下角在原点，右上角在 (xCorner, yCorner) 的矩形。你需要判断是否存在一条从左下角到右上角的路径满足：路径 完全 在矩形内部，不会 触碰或者经过 任何 圆的内部和边界，同时 只 在起点和终点接触到矩形。&lt;/p>
&lt;p>如果存在这样的路径，请你返回 true ，否则返回 false 。&lt;/p>
&lt;p>以下是官网给的示例，便于理解题目意思：&lt;/p>
&lt;p>&lt;img src="https://xiongyuaay.github.io/images/pre/image.png" alt="alt text">&lt;/p>
&lt;h2 id="解题思路">解题思路&lt;/h2>
&lt;p>分析题目，我认为可以从两个方面去考虑：&lt;/p>
&lt;ul>
&lt;li>找到可以连接矩形两个角落的路径&lt;/li>
&lt;li>证明所有的圆覆盖的区域完全阻塞了可能的路径&lt;/li>
&lt;/ul>
&lt;p>首先从第一个方向思考，要找到可以连接矩形两个角落的路径，可以从起点出发，不断探索可以延申的方向，通过深度搜索或者广度搜索，如果可以探索到一条到达右上角（目的角落）的路径，即说明存在这样的路径，如果遍历完全后，仍然没有可行解，则说明起点与终点之间被完全阻塞了。&lt;/p>
&lt;p>考虑到在进行深度搜索或者广度搜索时，从一个节点出发的下一个节点的可能性是有限的，并且总的节点数目也应该是有限的，这样才能确保搜索到所有可能的路径。&lt;/p>
&lt;p>但是题目中，并没有限制路径的经过节点，这条可能的路径将是可以任意曲折的，只要两点间存在区域没有被圆所覆盖，路径便可以经过。&lt;/p>
&lt;p>此时我首先想从数学上找出一些限制条件，或者使得两点间可达的充分必要条件，考虑将整个矩形划分为网格，一个点所能达到的地方便是其四周八个点。但是在考虑的过程中，我发现无论怎样划分网格，下一个节点的可达性总是不一定影响再下一个节点的可达性。&lt;/p>
&lt;p>此时选择从第二个方向思考，即考虑在怎样的情况下，所有可达的路径被圆覆盖。&lt;/p>
&lt;p>由于最终所求的路径是从左下角到右上角，可以发现，只要从左边界或者上边界有一个连续的区域直达下边界或者右边界即可以确定不存在路径从左下角到右上角。如下图：&lt;/p>
&lt;p>&lt;img src="https://xiongyuaay.github.io/images/pre/image-1.png" alt="alt text">&lt;/p>
&lt;p>即只需确定一系列连续的圆从左边界或者上边界出发，可以从圆占据的区域内经过到达下边界或者右边界。这里考虑从左上边界出发（无论从哪边出发不影响结论）。而圆与圆间是否连续，可以通过两圆是否相交或者相切来判断。&lt;/p>
&lt;p>此外，在编写代码之前，我们可以有以下条件：&lt;/p>
&lt;ul>
&lt;li>任意一个圆，如果它与矩形区域没有任何重叠的地方，那么它不影响结论，可以去除&lt;/li>
&lt;li>如果左上边界（或者右下边界）没有任何一个圆穿过它与矩形内部相交，那么一定存在紧贴与这个边界的路径连接矩形的两个角落。&lt;/li>
&lt;li>如果两个圆虽然相交，但是相交的区域与矩形区域没有任何重叠，那么这种相交不能作为矩形内部圆连通的标志。&lt;/li>
&lt;/ul>
&lt;p>根据上述讨论，可以根据有效圆的相交相切关系，建立一棵表示连通关系的森林，森林中每一个节点即表示一个有效圆，每一条边表示一个有效连接关系。森林中每一棵树的根结点即为与左上边界相交或者相切的圆。&lt;strong>注意：任何一个圆不可以既作为根结点又作为与根结点具有连通关系的子节点&lt;/strong>&lt;/p>
&lt;p>之后根据广度搜索即可以探索出是否所有的路径都被阻塞。判断为被阻塞的终止条件是有节点与右下边界相交或者相切。&lt;/p>
&lt;h2 id="c代码实现">C++代码实现&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> canReachCorner(&lt;span style="color:#66d9ef">int&lt;/span> xCorner, &lt;span style="color:#66d9ef">int&lt;/span> yCorner, vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;amp;&lt;/span> circles) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> path;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">auto&lt;/span> it&lt;span style="color:#f92672">=&lt;/span>circles.begin();it&lt;span style="color:#f92672">!=&lt;/span>circles.end();it&lt;span style="color:#f92672">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (it&lt;span style="color:#f92672">-&amp;gt;&lt;/span>at(&lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> it&lt;span style="color:#f92672">-&amp;gt;&lt;/span>at(&lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">||&lt;/span> it&lt;span style="color:#f92672">-&amp;gt;&lt;/span>at(&lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#f92672">-&lt;/span> it&lt;span style="color:#f92672">-&amp;gt;&lt;/span>at(&lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">&amp;gt;=&lt;/span> xCorner &lt;span style="color:#f92672">||&lt;/span> it&lt;span style="color:#f92672">-&amp;gt;&lt;/span>at(&lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> it&lt;span style="color:#f92672">-&amp;gt;&lt;/span>at(&lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">||&lt;/span> it&lt;span style="color:#f92672">-&amp;gt;&lt;/span>at(&lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">-&lt;/span> it&lt;span style="color:#f92672">-&amp;gt;&lt;/span>at(&lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">&amp;gt;=&lt;/span> yCorner)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> circles.erase(it);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> it&lt;span style="color:#f92672">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> x1 &lt;span style="color:#f92672">=&lt;/span> it&lt;span style="color:#f92672">-&amp;gt;&lt;/span>at(&lt;span style="color:#ae81ff">0&lt;/span>), y1 &lt;span style="color:#f92672">=&lt;/span> it&lt;span style="color:#f92672">-&amp;gt;&lt;/span>at(&lt;span style="color:#ae81ff">1&lt;/span>), r1 &lt;span style="color:#f92672">=&lt;/span> it&lt;span style="color:#f92672">-&amp;gt;&lt;/span>at(&lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ((pow(x1, &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> pow(y1, &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> pow(r1, &lt;span style="color:#ae81ff">2&lt;/span>)) &lt;span style="color:#f92672">||&lt;/span> (pow(x1, &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> pow(y1 &lt;span style="color:#f92672">-&lt;/span> yCorner, &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> pow(r1, &lt;span style="color:#ae81ff">2&lt;/span>)) &lt;span style="color:#f92672">||&lt;/span> (abs(x1) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> r1 &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> y1 &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> y1 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> yCorner) &lt;span style="color:#f92672">||&lt;/span> (abs(y1 &lt;span style="color:#f92672">-&lt;/span> yCorner) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> r1 &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> x1 &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> x1 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> xCorner) &lt;span style="color:#f92672">||&lt;/span> ((x1 &lt;span style="color:#f92672">-&lt;/span> xCorner)&lt;span style="color:#f92672">*&lt;/span>(x1 &lt;span style="color:#f92672">-&lt;/span> xCorner) &lt;span style="color:#f92672">+&lt;/span> (y1 &lt;span style="color:#f92672">-&lt;/span> yCorner)&lt;span style="color:#f92672">*&lt;/span>(y1 &lt;span style="color:#f92672">-&lt;/span> yCorner) &lt;span style="color:#f92672">-&lt;/span> r1&lt;span style="color:#f92672">*&lt;/span>r1 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path.push_back(&lt;span style="color:#f92672">*&lt;/span>it);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> circles.erase(it);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> it&lt;span style="color:#f92672">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#f92672">!&lt;/span>circles.size() &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">!&lt;/span>path.size())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> true;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (path.size())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> circle &lt;span style="color:#f92672">=&lt;/span> path.front();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path.erase(path.begin());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> x2 &lt;span style="color:#f92672">=&lt;/span> circle[&lt;span style="color:#ae81ff">0&lt;/span>], y2 &lt;span style="color:#f92672">=&lt;/span> circle[&lt;span style="color:#ae81ff">1&lt;/span>], r2 &lt;span style="color:#f92672">=&lt;/span> circle[&lt;span style="color:#ae81ff">2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>((x2&lt;span style="color:#f92672">*&lt;/span>x2 &lt;span style="color:#f92672">+&lt;/span> y2&lt;span style="color:#f92672">*&lt;/span>y2 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> r2&lt;span style="color:#f92672">*&lt;/span>r2) &lt;span style="color:#f92672">||&lt;/span> ((x2 &lt;span style="color:#f92672">-&lt;/span> xCorner)&lt;span style="color:#f92672">*&lt;/span>(x2 &lt;span style="color:#f92672">-&lt;/span> xCorner) &lt;span style="color:#f92672">+&lt;/span> y2&lt;span style="color:#f92672">*&lt;/span>y2 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> r2&lt;span style="color:#f92672">*&lt;/span>r2) &lt;span style="color:#f92672">||&lt;/span> ((x2 &lt;span style="color:#f92672">-&lt;/span> xCorner)&lt;span style="color:#f92672">*&lt;/span>(x2 &lt;span style="color:#f92672">-&lt;/span> xCorner) &lt;span style="color:#f92672">+&lt;/span> (y2 &lt;span style="color:#f92672">-&lt;/span> yCorner)&lt;span style="color:#f92672">*&lt;/span>(y2 &lt;span style="color:#f92672">-&lt;/span> yCorner) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> r2&lt;span style="color:#f92672">*&lt;/span>r2) &lt;span style="color:#f92672">||&lt;/span> (abs(x2 &lt;span style="color:#f92672">-&lt;/span> xCorner) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> r2 &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> y2 &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> y2 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> yCorner) &lt;span style="color:#f92672">||&lt;/span> (abs(y2) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> r2 &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> x2 &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> x2 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> xCorner))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> false;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span> it&lt;span style="color:#f92672">=&lt;/span>circles.begin();it&lt;span style="color:#f92672">!=&lt;/span>circles.end();it&lt;span style="color:#f92672">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> x1 &lt;span style="color:#f92672">=&lt;/span> it&lt;span style="color:#f92672">-&amp;gt;&lt;/span>at(&lt;span style="color:#ae81ff">0&lt;/span>), y1 &lt;span style="color:#f92672">=&lt;/span> it&lt;span style="color:#f92672">-&amp;gt;&lt;/span>at(&lt;span style="color:#ae81ff">1&lt;/span>), r1 &lt;span style="color:#f92672">=&lt;/span> it&lt;span style="color:#f92672">-&amp;gt;&lt;/span>at(&lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> R &lt;span style="color:#f92672">=&lt;/span> sqrt((x1 &lt;span style="color:#f92672">-&lt;/span> x2)&lt;span style="color:#f92672">*&lt;/span>(x1 &lt;span style="color:#f92672">-&lt;/span> x2) &lt;span style="color:#f92672">+&lt;/span> (y1 &lt;span style="color:#f92672">-&lt;/span> y2)&lt;span style="color:#f92672">*&lt;/span>(y1 &lt;span style="color:#f92672">-&lt;/span> y2));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> R_2 &lt;span style="color:#f92672">=&lt;/span> (x1 &lt;span style="color:#f92672">-&lt;/span> x2)&lt;span style="color:#f92672">*&lt;/span>(x1 &lt;span style="color:#f92672">-&lt;/span> x2) &lt;span style="color:#f92672">+&lt;/span> (y1 &lt;span style="color:#f92672">-&lt;/span> y2)&lt;span style="color:#f92672">*&lt;/span>(y1 &lt;span style="color:#f92672">-&lt;/span> y2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(R_2 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> (r1 &lt;span style="color:#f92672">+&lt;/span> r2)&lt;span style="color:#f92672">*&lt;/span>(r1 &lt;span style="color:#f92672">+&lt;/span> r2))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> r1_2 &lt;span style="color:#f92672">=&lt;/span> pow(r1, &lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> r2_2 &lt;span style="color:#f92672">=&lt;/span> pow(r2, &lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> temp1 &lt;span style="color:#f92672">=&lt;/span> (r1_2 &lt;span style="color:#f92672">-&lt;/span> r2_2) &lt;span style="color:#f92672">/&lt;/span> (&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">*&lt;/span>R_2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> temp2 &lt;span style="color:#f92672">=&lt;/span> (sqrt(&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">*&lt;/span>(r1_2 &lt;span style="color:#f92672">+&lt;/span> r2_2) &lt;span style="color:#f92672">/&lt;/span> R_2 &lt;span style="color:#f92672">-&lt;/span> pow(r1_2 &lt;span style="color:#f92672">-&lt;/span>r2_2, &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">/&lt;/span> pow(R_2, &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> a1 &lt;span style="color:#f92672">=&lt;/span> (x1 &lt;span style="color:#f92672">+&lt;/span> x2)&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">+&lt;/span> temp1 &lt;span style="color:#f92672">*&lt;/span> (x2 &lt;span style="color:#f92672">-&lt;/span> x1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> a2 &lt;span style="color:#f92672">=&lt;/span> (y2 &lt;span style="color:#f92672">-&lt;/span> y1) &lt;span style="color:#f92672">*&lt;/span> temp2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> b1 &lt;span style="color:#f92672">=&lt;/span> (y1 &lt;span style="color:#f92672">+&lt;/span> y2)&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">+&lt;/span> temp1 &lt;span style="color:#f92672">*&lt;/span> (y2 &lt;span style="color:#f92672">-&lt;/span> y1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> b2 &lt;span style="color:#f92672">=&lt;/span> (x1 &lt;span style="color:#f92672">-&lt;/span> x2) &lt;span style="color:#f92672">*&lt;/span> temp2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ((a1 &lt;span style="color:#f92672">+&lt;/span> a2 &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> b1 &lt;span style="color:#f92672">+&lt;/span> b2 &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> a1 &lt;span style="color:#f92672">-&lt;/span> a2 &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> b1 &lt;span style="color:#f92672">-&lt;/span> b2 &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#f92672">||&lt;/span> (a1 &lt;span style="color:#f92672">+&lt;/span> a2 &lt;span style="color:#f92672">&amp;gt;&lt;/span> xCorner &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> b1 &lt;span style="color:#f92672">+&lt;/span> b2 &lt;span style="color:#f92672">&amp;gt;&lt;/span> yCorner &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> a1 &lt;span style="color:#f92672">-&lt;/span> a2 &lt;span style="color:#f92672">&amp;gt;&lt;/span> xCorner &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> b1 &lt;span style="color:#f92672">-&lt;/span> b2 &lt;span style="color:#f92672">&amp;gt;&lt;/span> yCorner))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path.push_back(&lt;span style="color:#f92672">*&lt;/span>it);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> circles.erase(it);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> it&lt;span style="color:#f92672">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> true;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>